<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
    xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
                        http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/documentation
                        http://www.mulesoft.org/schema/mule/http-policy http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
                        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
                        http://www.mulesoft.org/schema/mule/documentation/current/mule-documentation.xsd">


    <http-policy:proxy name="{{{policyId}}}-treblle-policy">
        <http-policy:source>

            <!-- Store the incoming request payload to restore it after the API call -->
            <set-variable variableName="startTime" value="#[now()]" />
            <set-variable variableName="startTimeInMillis"
                value="#[dw::util::Timer::currentMilliseconds()]" />
            <set-variable variableName="reqPayload" value="#[payload]" />
            <set-variable variableName="reqHeaders" value="#[attributes.headers]" />
            <set-variable variableName="reqURL" value="#[attributes.requestPath]" />
            <set-variable variableName="remoteAdd" value="#[attributes.remoteAddress]" />
            <set-variable variableName="scheme" value="#[attributes.scheme]" />
            <set-variable variableName="method" value="#[attributes.method]" />
            <set-variable variableName="userAgent" value="#[attributes.headers['user-agent']]" />
            <set-variable variableName="reqTime"
                value="#[vars.startTime as String {format: 'yyyy-MM-dd HH:mm:ss'}]" />

            <!-- Proceed with the original request processing -->
            <http-policy:execute-next />

            <set-variable variableName="endTime" value="#[dw::util::Timer::currentMilliseconds()]" />
            <set-variable variableName="resPayload" value="#[payload]" />
            <set-variable variableName="resHeaders" value="#[attributes.headers]" />
            <set-variable variableName="timeZone" value="#[server.timeZone]" />
            <set-variable variableName="osName" value="#[server.osName]" />
            <set-variable variableName="osArch" value="#[server.osArch]" />
            <set-variable variableName="osVersion" value="#[server.osVersion]" />
            <set-variable variableName="encoding" value="#[app.encoding]" />
            <set-variable variableName="statusCode" value="#[attributes.statusCode]" />
            <set-variable variableName="elapsedTime"
                value="#[(vars.endTime - vars.startTimeInMillis)*1000]" />

            <!-- Calculate response payload size -->
            <choice>
                <when expression="#[attributes.headers['Content-Length'] != null]">

                    <set-variable variableName="payloadSize"
                        value="#[attributes.headers['Content-Length']]" />
                </when>
                <when expression="#[vars.resPayload is Object]">

                    <set-variable variableName="payloadSize"
                        value="#[sizeOf(write(vars.resPayload, 'application/json') as Binary)]" />
                </when>
                <otherwise>

                    <set-variable variableName="payloadSize"
                        value="#[sizeOf(vars.resPayload as Binary)]" />
                </otherwise>
            </choice>


            <async>

                <!-- Randomly select an endpoint for publishing -->
                <set-variable variableName="endpoints"
                    value="#[ [ 'https://rocknrolla.treblle.com', 'https://punisher.treblle.com', 'https://sicario.treblle.com' ] ]" />
                <set-variable variableName="selectedEP"
                    value="#[vars.endpoints[dw::Core::randomInt(3)]]" />
                <set-variable variableName="onlyHost"
                    value="#[vars.selectedEP replace 'https://' with '']" />

                <!-- Set payload for publishing -->
                <set-payload
                    value="#[output application/json ---
                        {
                            'project_id': '{{{projectID}}}',
                            'api_key': '{{{apiKey}}}',
                            'version' : 0.6,
                            'sdk': 'MuleSoft',
                            'data': {
                                    'server': {
                                        'timezone': vars.timeZone,
                                        'os': {
                                            'name': vars.osName,
                                            'release': vars.osVersion,
                                            'architecture': vars.osArch
                                        },
                                        'software': 'MuleSoft',
                                        'signature': '',
                                        'protocol': vars.scheme,
                                        'encoding': vars.encoding
                                    },
                                    'request': {
                                        'timestamp': vars.reqTime,
                                        'ip': vars.remoteAdd,
                                        'url': 'https://cloudhub.io' ++ vars.reqURL,
                                        'user_agent': vars.userAgent,
                                        'method': vars.method,
                                        'headers': vars.reqHeaders,
                                        'body': vars.reqPayload,
                                    },
                                    response: {
                                        'headers': vars.resHeaders,
                                        'code': vars.statusCode,
                                        'size': vars.payloadSize,
                                        'load_time': vars.elapsedTime,
                                        'body': vars.resPayload
                                    },
                                    'errors': []
                                }
                        }]"
                />

                <!-- Handling error cases -->
                <choice>
                    <when expression="#[vars.statusCode >= 400 and vars.statusCode &lt; 600]">
                        <ee:transform doc:name="Update Errors Only">
                            <ee:message>
                                <ee:set-payload><![CDATA[%dw 2.0
                                    output application/json
                                    ---
                                    payload update {
                                        case .data.errors -> [
                                            {
                                                'type': "API Request failure",
                                                'source': "onError",
                                                'message': vars.resPayload
                                            }
                                        ]
                                    }
                                    ]]></ee:set-payload>
                            </ee:message>
                        </ee:transform>
                    </when>
                    <otherwise>
                        <logger level="DEBUG" message="API request failure - #[vars.resPayload]" />
                    </otherwise>
                </choice>

                <!-- Masking sensitive data -->
                <set-variable variableName="maskingKeys" value='{{{maskKeywords}}}' />
                <ee:transform doc:name="Mask Payload Values">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
                            output application/json
                            fun maskValues(obj, maskKeys) = 
                                obj mapObject (value, key, index) -> {
                                    (key): 
                                        if (maskKeys contains (key as String)) 
                                            "*****" 
                                        else if (value is Object) 
                                            maskValues(value, maskKeys)
                                        else 
                                            value
                                }
                            ---
                            maskValues(payload, vars.maskingKeys)
                            ]]>
                        </ee:set-payload>
                    </ee:message>
                </ee:transform>

                <http:request method="POST" url="#[vars.selectedEP]"
                    config-ref="HTTP_Request_configuration">
                    <http:headers>
                        #[attributes.headers ++ {
                        'Content-Type': 'application/json',
                        'x-api-key': '{{{apiKey}}}',
                        'User-Agent': 'MuleSoft-plugin-treblle'
                        }]
                    </http:headers>
                </http:request>

            </async>

        </http-policy:source>
    </http-policy:proxy>

    <http:request-config name="HTTP_Request_configuration">
        <http:request-connection host="#[vars.onlyHost]" port="443">

        </http:request-connection>
    </http:request-config>

</mule>